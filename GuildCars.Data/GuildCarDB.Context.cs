//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GuildCars.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GuildCarsEntities : DbContext
    {
        public GuildCarsEntities()
            : base("name=GuildCarsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<BodyStyle> BodyStyles { get; set; }
        public virtual DbSet<CarType> CarTypes { get; set; }
        public virtual DbSet<Color> Colors { get; set; }
        public virtual DbSet<ContactU> ContactUs { get; set; }
        public virtual DbSet<CustomerPurchase> CustomerPurchases { get; set; }
        public virtual DbSet<Interior> Interiors { get; set; }
        public virtual DbSet<Special> Specials { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Transmission> Transmissions { get; set; }
        public virtual DbSet<PurchaseType> PurchaseTypes { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CarMake> CarMakes { get; set; }
        public virtual DbSet<CarModel> CarModels { get; set; }
        public virtual DbSet<Car> Cars { get; set; }
        public virtual DbSet<Purchase> Purchases { get; set; }
    
        public virtual int AddRoleToUser(string userId, string roleId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRoleToUser", userIdParameter, roleIdParameter);
        }
    
        public virtual int AddSpecial(string specialTitle, string specialDescription)
        {
            var specialTitleParameter = specialTitle != null ?
                new ObjectParameter("SpecialTitle", specialTitle) :
                new ObjectParameter("SpecialTitle", typeof(string));
    
            var specialDescriptionParameter = specialDescription != null ?
                new ObjectParameter("SpecialDescription", specialDescription) :
                new ObjectParameter("SpecialDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSpecial", specialTitleParameter, specialDescriptionParameter);
        }
    
        public virtual int ChangePassword(string id, string passwordHash)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangePassword", idParameter, passwordHashParameter);
        }
    
        public virtual int DbReset()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DbReset");
        }
    
        public virtual int DeleteSpecial(Nullable<int> specialId)
        {
            var specialIdParameter = specialId.HasValue ?
                new ObjectParameter("SpecialId", specialId) :
                new ObjectParameter("SpecialId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSpecial", specialIdParameter);
        }
    
        public virtual int DeleteUser(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", idParameter);
        }
    
        public virtual int DeleteVehicle(Nullable<int> carId)
        {
            var carIdParameter = carId.HasValue ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVehicle", carIdParameter);
        }
    
        public virtual int EditUser(string id, string email, Nullable<bool> emailConfirmed, string passwordHash, string securityStamp, string phoneNumber, Nullable<bool> phoneNumberConfirmed, Nullable<bool> twoFactorEnabled, Nullable<System.DateTime> lockoutEndDateUtc, Nullable<bool> lockoutEnabled, Nullable<int> accessFailedCount, string userName)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var emailConfirmedParameter = emailConfirmed.HasValue ?
                new ObjectParameter("EmailConfirmed", emailConfirmed) :
                new ObjectParameter("EmailConfirmed", typeof(bool));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var securityStampParameter = securityStamp != null ?
                new ObjectParameter("SecurityStamp", securityStamp) :
                new ObjectParameter("SecurityStamp", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberConfirmedParameter = phoneNumberConfirmed.HasValue ?
                new ObjectParameter("PhoneNumberConfirmed", phoneNumberConfirmed) :
                new ObjectParameter("PhoneNumberConfirmed", typeof(bool));
    
            var twoFactorEnabledParameter = twoFactorEnabled.HasValue ?
                new ObjectParameter("TwoFactorEnabled", twoFactorEnabled) :
                new ObjectParameter("TwoFactorEnabled", typeof(bool));
    
            var lockoutEndDateUtcParameter = lockoutEndDateUtc.HasValue ?
                new ObjectParameter("LockoutEndDateUtc", lockoutEndDateUtc) :
                new ObjectParameter("LockoutEndDateUtc", typeof(System.DateTime));
    
            var lockoutEnabledParameter = lockoutEnabled.HasValue ?
                new ObjectParameter("LockoutEnabled", lockoutEnabled) :
                new ObjectParameter("LockoutEnabled", typeof(bool));
    
            var accessFailedCountParameter = accessFailedCount.HasValue ?
                new ObjectParameter("AccessFailedCount", accessFailedCount) :
                new ObjectParameter("AccessFailedCount", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditUser", idParameter, emailParameter, emailConfirmedParameter, passwordHashParameter, securityStampParameter, phoneNumberParameter, phoneNumberConfirmedParameter, twoFactorEnabledParameter, lockoutEndDateUtcParameter, lockoutEnabledParameter, accessFailedCountParameter, userNameParameter);
        }
    
        public virtual ObjectResult<GetAllByMake_Result> GetAllByMake(string makeName)
        {
            var makeNameParameter = makeName != null ?
                new ObjectParameter("MakeName", makeName) :
                new ObjectParameter("MakeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllByMake_Result>("GetAllByMake", makeNameParameter);
        }
    
        public virtual ObjectResult<CarModel> GetAllByModel(string modelName)
        {
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarModel>("GetAllByModel", modelNameParameter);
        }
    
        public virtual ObjectResult<CarModel> GetAllByModel(string modelName, MergeOption mergeOption)
        {
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarModel>("GetAllByModel", mergeOption, modelNameParameter);
        }
    
        public virtual ObjectResult<GetAllByYear_Result> GetAllByYear(string year)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllByYear_Result>("GetAllByYear", yearParameter);
        }
    
        public virtual ObjectResult<Special> GetAllSpecials()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Special>("GetAllSpecials");
        }
    
        public virtual ObjectResult<Special> GetAllSpecials(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Special>("GetAllSpecials", mergeOption);
        }
    
        public virtual ObjectResult<HomePageFS_Result> HomePageFS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HomePageFS_Result>("HomePageFS");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SubmitContactUs(string name, string email, string phone, string message)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubmitContactUs", nameParameter, emailParameter, phoneParameter, messageParameter);
        }
    
        public virtual ObjectResult<GetAllFeatured_Result> GetAllFeatured()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllFeatured_Result>("GetAllFeatured");
        }
    
        public virtual ObjectResult<PurchaseType> GetPurchaseType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchaseType>("GetPurchaseType");
        }
    
        public virtual ObjectResult<PurchaseType> GetPurchaseType(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchaseType>("GetPurchaseType", mergeOption);
        }
    
        public virtual ObjectResult<GetStates_Result> GetStates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStates_Result>("GetStates");
        }
    
        public virtual ObjectResult<BodyStyle> GetBodyStyle()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BodyStyle>("GetBodyStyle");
        }
    
        public virtual ObjectResult<BodyStyle> GetBodyStyle(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BodyStyle>("GetBodyStyle", mergeOption);
        }
    
        public virtual ObjectResult<CarType> GetCarType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarType>("GetCarType");
        }
    
        public virtual ObjectResult<CarType> GetCarType(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarType>("GetCarType", mergeOption);
        }
    
        public virtual ObjectResult<Color> GetColor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Color>("GetColor");
        }
    
        public virtual ObjectResult<Color> GetColor(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Color>("GetColor", mergeOption);
        }
    
        public virtual ObjectResult<Interior> GetInterior()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Interior>("GetInterior");
        }
    
        public virtual ObjectResult<Interior> GetInterior(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Interior>("GetInterior", mergeOption);
        }
    
        public virtual ObjectResult<GetTransmission_Result> GetTransmission()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransmission_Result>("GetTransmission");
        }
    
        public virtual int AddVehicleMake(string makeName, string user)
        {
            var makeNameParameter = makeName != null ?
                new ObjectParameter("MakeName", makeName) :
                new ObjectParameter("MakeName", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVehicleMake", makeNameParameter, userParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> AddVehicle(Nullable<int> year, Nullable<int> carMakeId, Nullable<int> carModelId, Nullable<int> typeId, Nullable<int> bodyStyleId, Nullable<int> transmissionId, Nullable<int> colorId, Nullable<int> interiorId, Nullable<decimal> mileage, string vINnumber, Nullable<decimal> salePrice, Nullable<decimal> mSRP, string carDescription, string imageFileName, Nullable<bool> isFeatured, Nullable<bool> isPurchased)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var carMakeIdParameter = carMakeId.HasValue ?
                new ObjectParameter("CarMakeId", carMakeId) :
                new ObjectParameter("CarMakeId", typeof(int));
    
            var carModelIdParameter = carModelId.HasValue ?
                new ObjectParameter("CarModelId", carModelId) :
                new ObjectParameter("CarModelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var bodyStyleIdParameter = bodyStyleId.HasValue ?
                new ObjectParameter("BodyStyleId", bodyStyleId) :
                new ObjectParameter("BodyStyleId", typeof(int));
    
            var transmissionIdParameter = transmissionId.HasValue ?
                new ObjectParameter("TransmissionId", transmissionId) :
                new ObjectParameter("TransmissionId", typeof(int));
    
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("ColorId", colorId) :
                new ObjectParameter("ColorId", typeof(int));
    
            var interiorIdParameter = interiorId.HasValue ?
                new ObjectParameter("InteriorId", interiorId) :
                new ObjectParameter("InteriorId", typeof(int));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(decimal));
    
            var vINnumberParameter = vINnumber != null ?
                new ObjectParameter("VINnumber", vINnumber) :
                new ObjectParameter("VINnumber", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(decimal));
    
            var mSRPParameter = mSRP.HasValue ?
                new ObjectParameter("MSRP", mSRP) :
                new ObjectParameter("MSRP", typeof(decimal));
    
            var carDescriptionParameter = carDescription != null ?
                new ObjectParameter("CarDescription", carDescription) :
                new ObjectParameter("CarDescription", typeof(string));
    
            var imageFileNameParameter = imageFileName != null ?
                new ObjectParameter("ImageFileName", imageFileName) :
                new ObjectParameter("ImageFileName", typeof(string));
    
            var isFeaturedParameter = isFeatured.HasValue ?
                new ObjectParameter("IsFeatured", isFeatured) :
                new ObjectParameter("IsFeatured", typeof(bool));
    
            var isPurchasedParameter = isPurchased.HasValue ?
                new ObjectParameter("IsPurchased", isPurchased) :
                new ObjectParameter("IsPurchased", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("AddVehicle", yearParameter, carMakeIdParameter, carModelIdParameter, typeIdParameter, bodyStyleIdParameter, transmissionIdParameter, colorIdParameter, interiorIdParameter, mileageParameter, vINnumberParameter, salePriceParameter, mSRPParameter, carDescriptionParameter, imageFileNameParameter, isFeaturedParameter, isPurchasedParameter);
        }
    
        public virtual int SaveImageToCar(Nullable<int> carId, string imageFileName)
        {
            var carIdParameter = carId.HasValue ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(int));
    
            var imageFileNameParameter = imageFileName != null ?
                new ObjectParameter("ImageFileName", imageFileName) :
                new ObjectParameter("ImageFileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveImageToCar", carIdParameter, imageFileNameParameter);
        }
    
        public virtual int EditVehicle(Nullable<int> carId, Nullable<int> year, Nullable<int> carMakeId, Nullable<int> carModelId, Nullable<int> typeId, Nullable<int> bodyStyleId, Nullable<int> transmissionId, Nullable<int> colorId, Nullable<int> interiorId, Nullable<decimal> mileage, string vINnumber, Nullable<decimal> salePrice, Nullable<decimal> mSRP, string carDescription, string imageFileName, Nullable<bool> isFeatured, Nullable<bool> isPurchased)
        {
            var carIdParameter = carId.HasValue ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var carMakeIdParameter = carMakeId.HasValue ?
                new ObjectParameter("CarMakeId", carMakeId) :
                new ObjectParameter("CarMakeId", typeof(int));
    
            var carModelIdParameter = carModelId.HasValue ?
                new ObjectParameter("CarModelId", carModelId) :
                new ObjectParameter("CarModelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var bodyStyleIdParameter = bodyStyleId.HasValue ?
                new ObjectParameter("BodyStyleId", bodyStyleId) :
                new ObjectParameter("BodyStyleId", typeof(int));
    
            var transmissionIdParameter = transmissionId.HasValue ?
                new ObjectParameter("TransmissionId", transmissionId) :
                new ObjectParameter("TransmissionId", typeof(int));
    
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("ColorId", colorId) :
                new ObjectParameter("ColorId", typeof(int));
    
            var interiorIdParameter = interiorId.HasValue ?
                new ObjectParameter("InteriorId", interiorId) :
                new ObjectParameter("InteriorId", typeof(int));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(decimal));
    
            var vINnumberParameter = vINnumber != null ?
                new ObjectParameter("VINnumber", vINnumber) :
                new ObjectParameter("VINnumber", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(decimal));
    
            var mSRPParameter = mSRP.HasValue ?
                new ObjectParameter("MSRP", mSRP) :
                new ObjectParameter("MSRP", typeof(decimal));
    
            var carDescriptionParameter = carDescription != null ?
                new ObjectParameter("CarDescription", carDescription) :
                new ObjectParameter("CarDescription", typeof(string));
    
            var imageFileNameParameter = imageFileName != null ?
                new ObjectParameter("ImageFileName", imageFileName) :
                new ObjectParameter("ImageFileName", typeof(string));
    
            var isFeaturedParameter = isFeatured.HasValue ?
                new ObjectParameter("IsFeatured", isFeatured) :
                new ObjectParameter("IsFeatured", typeof(bool));
    
            var isPurchasedParameter = isPurchased.HasValue ?
                new ObjectParameter("IsPurchased", isPurchased) :
                new ObjectParameter("IsPurchased", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditVehicle", carIdParameter, yearParameter, carMakeIdParameter, carModelIdParameter, typeIdParameter, bodyStyleIdParameter, transmissionIdParameter, colorIdParameter, interiorIdParameter, mileageParameter, vINnumberParameter, salePriceParameter, mSRPParameter, carDescriptionParameter, imageFileNameParameter, isFeaturedParameter, isPurchasedParameter);
        }
    
        public virtual ObjectResult<Special> GetSpecialById(Nullable<int> specialId)
        {
            var specialIdParameter = specialId.HasValue ?
                new ObjectParameter("SpecialId", specialId) :
                new ObjectParameter("SpecialId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Special>("GetSpecialById", specialIdParameter);
        }
    
        public virtual ObjectResult<Special> GetSpecialById(Nullable<int> specialId, MergeOption mergeOption)
        {
            var specialIdParameter = specialId.HasValue ?
                new ObjectParameter("SpecialId", specialId) :
                new ObjectParameter("SpecialId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Special>("GetSpecialById", mergeOption, specialIdParameter);
        }
    
        public virtual ObjectResult<CarMake> GetCarMake()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarMake>("GetCarMake");
        }
    
        public virtual ObjectResult<CarMake> GetCarMake(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarMake>("GetCarMake", mergeOption);
        }
    
        public virtual ObjectResult<CarModel> GetCarModel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarModel>("GetCarModel");
        }
    
        public virtual ObjectResult<CarModel> GetCarModel(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarModel>("GetCarModel", mergeOption);
        }
    
        public virtual ObjectResult<Car> GetAllByCarId(Nullable<int> carId)
        {
            var carIdParameter = carId.HasValue ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Car>("GetAllByCarId", carIdParameter);
        }
    
        public virtual ObjectResult<Car> GetAllByCarId(Nullable<int> carId, MergeOption mergeOption)
        {
            var carIdParameter = carId.HasValue ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Car>("GetAllByCarId", mergeOption, carIdParameter);
        }
    
        public virtual ObjectResult<GetNewInventory_Result1> GetNewInventory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNewInventory_Result1>("GetNewInventory");
        }
    
        public virtual ObjectResult<GetUsedInventory_Result1> GetUsedInventory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsedInventory_Result1>("GetUsedInventory");
        }
    
        public virtual ObjectResult<NewInventoryReport_Result> NewInventoryReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NewInventoryReport_Result>("NewInventoryReport");
        }
    
        public virtual ObjectResult<UsedInventoryReport_Result> UsedInventoryReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UsedInventoryReport_Result>("UsedInventoryReport");
        }
    
        public virtual ObjectResult<SalesReport_Result> SalesReport(string user, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesReport_Result>("SalesReport", userParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetCarModelsByMakeId_Result> GetCarModelsByMakeId(Nullable<int> carMakeId)
        {
            var carMakeIdParameter = carMakeId.HasValue ?
                new ObjectParameter("CarMakeId", carMakeId) :
                new ObjectParameter("CarMakeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarModelsByMakeId_Result>("GetCarModelsByMakeId", carMakeIdParameter);
        }
    
        public virtual ObjectResult<GetAllUsers_Result> GetAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUsers_Result>("GetAllUsers");
        }
    
        public virtual ObjectResult<AspNetRole> GetAllRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AspNetRole>("GetAllRoles");
        }
    
        public virtual ObjectResult<AspNetRole> GetAllRoles(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AspNetRole>("GetAllRoles", mergeOption);
        }
    
        public virtual ObjectResult<string> AddUser(string id, string email, Nullable<bool> emailConfirmed, string passwordHash, string securityStamp, string phoneNumber, Nullable<bool> phoneNumberConfirmed, Nullable<bool> twoFactorEnabled, Nullable<System.DateTime> lockoutEndDateUtc, Nullable<bool> lockoutEnabled, Nullable<int> accessFailedCount, string userName)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var emailConfirmedParameter = emailConfirmed.HasValue ?
                new ObjectParameter("EmailConfirmed", emailConfirmed) :
                new ObjectParameter("EmailConfirmed", typeof(bool));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var securityStampParameter = securityStamp != null ?
                new ObjectParameter("SecurityStamp", securityStamp) :
                new ObjectParameter("SecurityStamp", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberConfirmedParameter = phoneNumberConfirmed.HasValue ?
                new ObjectParameter("PhoneNumberConfirmed", phoneNumberConfirmed) :
                new ObjectParameter("PhoneNumberConfirmed", typeof(bool));
    
            var twoFactorEnabledParameter = twoFactorEnabled.HasValue ?
                new ObjectParameter("TwoFactorEnabled", twoFactorEnabled) :
                new ObjectParameter("TwoFactorEnabled", typeof(bool));
    
            var lockoutEndDateUtcParameter = lockoutEndDateUtc.HasValue ?
                new ObjectParameter("LockoutEndDateUtc", lockoutEndDateUtc) :
                new ObjectParameter("LockoutEndDateUtc", typeof(System.DateTime));
    
            var lockoutEnabledParameter = lockoutEnabled.HasValue ?
                new ObjectParameter("LockoutEnabled", lockoutEnabled) :
                new ObjectParameter("LockoutEnabled", typeof(bool));
    
            var accessFailedCountParameter = accessFailedCount.HasValue ?
                new ObjectParameter("AccessFailedCount", accessFailedCount) :
                new ObjectParameter("AccessFailedCount", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AddUser", idParameter, emailParameter, emailConfirmedParameter, passwordHashParameter, securityStampParameter, phoneNumberParameter, phoneNumberConfirmedParameter, twoFactorEnabledParameter, lockoutEndDateUtcParameter, lockoutEnabledParameter, accessFailedCountParameter, userNameParameter);
        }
    
        public virtual ObjectResult<GetUserById_Result3> GetUserById(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserById_Result3>("GetUserById", idParameter);
        }
    
        public virtual int PurchaseVehicle(Nullable<int> carId, string name, string address1, string address2, string city, string stateId, Nullable<int> zipCode, string phone, string email, Nullable<bool> isPurchased, Nullable<decimal> purchasePrice, Nullable<int> purchaseTypeId, string salesPerson, Nullable<System.DateTime> datePurchased)
        {
            var carIdParameter = carId.HasValue ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId != null ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(string));
    
            var zipCodeParameter = zipCode.HasValue ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var isPurchasedParameter = isPurchased.HasValue ?
                new ObjectParameter("IsPurchased", isPurchased) :
                new ObjectParameter("IsPurchased", typeof(bool));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(decimal));
    
            var purchaseTypeIdParameter = purchaseTypeId.HasValue ?
                new ObjectParameter("PurchaseTypeId", purchaseTypeId) :
                new ObjectParameter("PurchaseTypeId", typeof(int));
    
            var salesPersonParameter = salesPerson != null ?
                new ObjectParameter("SalesPerson", salesPerson) :
                new ObjectParameter("SalesPerson", typeof(string));
    
            var datePurchasedParameter = datePurchased.HasValue ?
                new ObjectParameter("DatePurchased", datePurchased) :
                new ObjectParameter("DatePurchased", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseVehicle", carIdParameter, nameParameter, address1Parameter, address2Parameter, cityParameter, stateIdParameter, zipCodeParameter, phoneParameter, emailParameter, isPurchasedParameter, purchasePriceParameter, purchaseTypeIdParameter, salesPersonParameter, datePurchasedParameter);
        }
    
        public virtual int AddVehicleModel(string modelName, Nullable<int> makeId, string user)
        {
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var makeIdParameter = makeId.HasValue ?
                new ObjectParameter("MakeId", makeId) :
                new ObjectParameter("MakeId", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVehicleModel", modelNameParameter, makeIdParameter, userParameter);
        }
    
        public virtual ObjectResult<AllSalesReports_Result> AllSalesReports()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllSalesReports_Result>("AllSalesReports");
        }
    
        public virtual ObjectResult<SalesReportByDate_Result> SalesReportByDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesReportByDate_Result>("SalesReportByDate", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetUserByName_Result> GetUserByName(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserByName_Result>("GetUserByName", userNameParameter);
        }
    }
}
